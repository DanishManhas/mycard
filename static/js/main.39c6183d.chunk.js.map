{"version":3,"sources":["logo.svg","myImage.jpg","Headline.js","ImageBox.js","Message.js","EmailBox.js","Logo.js","Card.js","CardData.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Headline","_ref","title","displayName","react_default","a","createElement","className","ImageBox","imageUrl","id","src","alt","Message","message","url","urlDisplayName","githubUrl","href","target","rel","EmailBox","email","concat","Logo","image","Card","headline","name","logo","console","log","messageProps","src_EmailBox","src_Logo","src_Headline","src_ImageBox","src_Message","cardData","App","props","myImage","src_Card","Object","assign","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gNCazBC,SAZE,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,MAAOC,EAATF,EAASE,YAAT,OACbC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,WACjBH,EAAAC,EAAAC,cAAA,UACCH,GAGGC,EAAAC,EAAAC,cAAA,UACCJ,MCHMM,EAJE,SAAAP,GAAA,IAAEQ,EAAFR,EAAEQ,SAAUN,EAAZF,EAAYE,YAAZ,OACTC,EAAAC,EAAAC,cAAA,OAAKI,GAAK,UAAUC,IAAOF,EAAUG,IAAOT,KCgBrCU,EAdC,SAAAZ,GAAoDA,EAAlDC,MAAkD,IAA3CY,EAA2Cb,EAA3Ca,QAASC,EAAkCd,EAAlCc,IAAKC,EAA6Bf,EAA7Be,eAAgBC,EAAahB,EAAbgB,UAEnD,OAAOb,EAAAC,EAAAC,cAAA,OAAKC,UAAY,WAEhBH,EAAAC,EAAAC,cAAA,SAAIQ,GAEJV,EAAAC,EAAAC,cAAA,sCAC4BF,EAAAC,EAAAC,cAAA,KAAGY,KAAQH,EAAKI,OAAS,SAASC,IAAM,uBAAuBJ,GACvFZ,EAAAC,EAAAC,cAAA,WAFJ,uBAGwBF,EAAAC,EAAAC,cAAA,KAAGY,KAAQD,EAAWE,OAAQ,SAASC,IAAM,uBAAuBJ,MCLzFK,EAPE,SAAApB,GAAA,IAAEqB,EAAFrB,EAAEqB,MAAF,OACblB,EAAAC,EAAAC,cAAA,OAAKC,UAAY,SACbH,EAAAC,EAAAC,cAAA,aAAOF,EAAAC,EAAAC,cAAA,sBACPF,EAAAC,EAAAC,cAAA,YAAMF,EAAAC,EAAAC,cAAA,KAAGY,KAAI,UAAAK,OAAcD,IAArB,IAAgCA,MCE/BE,EALF,SAAAvB,GAAA,IAAEwB,EAAFxB,EAAEwB,MAAF,OAELrB,EAAAC,EAAAC,cAAA,OAAKC,UAAY,sBAAsBI,IAAOc,EAAOb,IAAM,gBC0BpDc,EAtBF,SAAAzB,GAA6F,IAA3FqB,EAA2FrB,EAA3FqB,MAAMK,EAAqF1B,EAArF0B,SAAUC,EAA2E3B,EAA3E2B,KAAMnB,EAAqER,EAArEQ,SAAUK,EAA2Db,EAA3Da,QAASC,EAAkDd,EAAlDc,IAAKC,EAA6Cf,EAA7Ce,eAAgBa,EAA6B5B,EAA7B4B,KAAKZ,EAAwBhB,EAAxBgB,UAAWV,EAAaN,EAAbM,UACzFuB,QAAQC,IAAI,aAAcxB,GAC1B,IAAMyB,EAAe,CACjB9B,MAAQyB,EACRb,QAAUA,EACVC,IAAMA,EACNC,eAAiBA,EACjBC,aAGL,OAAOb,EAAAC,EAAAC,cAAA,OAAKC,UAAaA,GACpBH,EAAAC,EAAAC,cAAA,OAAKC,UAAY,WACjBH,EAAAC,EAAAC,cAAC2B,EAAD,CAAUX,MAASA,IACnBlB,EAAAC,EAAAC,cAAC4B,EAAD,CAAMT,MAASI,IAEfzB,EAAAC,EAAAC,cAAC6B,EAAD,CAAUjC,MAASyB,EAAUxB,YAAeyB,IAC5CxB,EAAAC,EAAAC,cAAC8B,EAAD,CAAU3B,SAAYA,EAAUN,YAAeyB,KAG/CxB,EAAAC,EAAAC,cAAC+B,EAAYL,KCbJM,EAbA,CACbX,SAAU,kBACVL,MAAQ,2BACRM,KAAM,kBAENd,QAAS,wEAETC,IAAK,uDACLE,UAAU,mCAEVD,eAAgB,gCCgCLuB,EAZH,WAAI,IAIRC,EAAQ,CAAClB,MADXgB,EADFhB,MAEmBK,SADjBW,EADKX,SAEsBC,KAD3BU,EADeV,KAEkBd,QADjCwB,EADqBxB,QAEqBC,IAD1CuB,EAD8BvB,IAEiBC,eAD/CsB,EADmCtB,eAE4BC,UAD/DqB,EADmDrB,UAGvCR,SAAWgC,IAASZ,UACpC,OAAOzB,EAAAC,EAAAC,cAAA,OAAKC,UAAY,OACtBH,EAAAC,EAAAC,cAACoC,EAADC,OAAAC,OAAA,CAAMrC,UAAY,aAAiBiC,MCzBnBK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.39c6183d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/myImage.bf823762.jpg\";","import React from 'react'\r\nconst Headline = ({title, displayName})=>(\r\n    <div className = \"heading\">\r\n    <h3>\r\n    {displayName}\r\n        \r\n        </h3>\r\n        <h4>\r\n        {title}\r\n            </h4>\r\n            </div>\r\n)\r\n\r\nexport default Headline","import React from 'react'\r\nconst ImageBox = ({imageUrl, displayName })=>(\r\n        <img id = 'profile' src = {imageUrl} alt = {displayName}/>\r\n        \r\n)\r\nexport default ImageBox","\r\n\r\nimport React from 'react'\r\n\r\nconst Message = ({title, message, url, urlDisplayName, githubUrl})=>{\r\n\r\n    return <div className = 'message'>\r\n            \r\n            <p>{message}</p>\r\n            \r\n            <div>\r\n                Find me on Linkedin:    <a href = {url} target = '_blank' rel = 'noopener noreferrer'>{urlDisplayName}</a>\r\n                <br/>\r\n                Checkout my Github: <a href = {githubUrl} target= '_blank' rel = 'noopener noreferrer'>{urlDisplayName}</a>\r\n            </div>\r\n            \r\n        </div>\r\n}\r\nexport default Message","import React from 'react'\r\nconst EmailBox = ({email})=>(\r\n    <div className = 'email'>\r\n        <label><em>Email:-</em></label>\r\n        <span><a href = {`mailto:${email}`}> {email}</a></span>\r\n        </div>\r\n)\r\n\r\nexport default EmailBox","import React from 'react';\r\nconst Logo = ({image})=>(\r\n    \r\n        <img className = 'logo image App-logo' src = {image} alt = \"react logo\"/>\r\n        \r\n)\r\nexport default Logo","import React from 'react'\r\nimport Headline from './Headline';\r\nimport ImageBox from './ImageBox';\r\nimport Message from './Message';\r\nimport EmailBox from './EmailBox';\r\nimport Logo from './Logo';\r\n\r\nconst Card = ({email,headline, name, imageUrl, message, url, urlDisplayName, logo,githubUrl, className})=>{\r\n    console.log(\"className \", className);\r\n    const messageProps = {\r\n        title : headline,\r\n        message : message,\r\n        url : url,\r\n        urlDisplayName : urlDisplayName,\r\n        githubUrl\r\n    }\r\n  \r\n   return <div className = {className}>\r\n        <div className = 'cardBox'>\r\n        <EmailBox email = {email}/>\r\n        <Logo image = {logo}/>\r\n        \r\n        <Headline title = {headline} displayName = {name}/>\r\n        <ImageBox imageUrl = {imageUrl} displayName = {name}/>\r\n        {/* <div style = {{clear : 'both'}}></div> */}\r\n        </div>\r\n        <Message {...messageProps}/>\r\n        </div>\r\n}\r\nexport default Card\r\n","const cardData = {\r\n    headline: 'React Developer',\r\n    email : 'danishmanhas23@gmail.com',\r\n    name: 'Danish A Manhas',\r\n  \r\n    message: \"I'm a javascript developer well primarily working in react currently.\",\r\n  \r\n    url: 'https://www.linkedin.com/in/danish-manhas-4247a1135/',\r\n    githubUrl:'https://github.com/DanishManhas/',\r\n  \r\n    urlDisplayName: 'DanishManhas',\r\n  }\r\n  \r\n  export default cardData;\r\n  ","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Card from './Card';\nimport cardData from './CardData';\nimport myImage from './myImage.jpg';\n\n// class App extends Component {\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//           <p>\n//             Edit <code>src/App.js</code> and save to reload.\n//           </p>\n//           <a\n//             className=\"App-link\"\n//             href=\"https://reactjs.org\"\n//             target=\"_blank\"\n//             rel=\"noopener noreferrer\"\n//           >\n//             Learn React\n//           </a>\n//         </header>\n//       </div>\n//     );\n//   }\n// }\n\nconst App = ()=>{\n  const{\n    email, headline, name, message, url, urlDisplayName, githubUrl\n  } = cardData;\n  const props = {email,headline, name, message, url, urlDisplayName, githubUrl,\n                  imageUrl : myImage, logo}\n  return <div className = \"App\">\n    <Card className = 'container'  {...props}/>\n  </div>\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}